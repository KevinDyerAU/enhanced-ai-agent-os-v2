version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aos_db}
      POSTGRES_USER: ${POSTGRES_USER:-aos_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aos_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/database:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - aos_network

  # Core Services
  orchestration_agent:
    build: ./services/core_services/orchestration_agent
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX_NAME=${PINECONE_INDEX_NAME}
      - DATA_ARCHITECTURE_URL=http://data_architecture:8020
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - data_architecture
    networks:
      - aos_network
    volumes:
      - ./services/core_services/orchestration_agent:/app

  # Creator Layer Services
  ideation_agent:
    build: ./services/creator_layer/ideation_agent
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DATA_ARCHITECTURE_URL=http://data_architecture:8020
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - data_architecture
    networks:
      - aos_network
    volumes:
      - ./services/creator_layer/ideation_agent:/app

  design_agent:
    build: ./services/creator_layer/design_agent
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CANVA_API_KEY=${CANVA_API_KEY}
    ports:
      - "8002:8002"
    depends_on:
      - postgres
    networks:
      - aos_network
    volumes:
      - ./services/creator_layer/design_agent:/app

  video_agent:
    build: ./services/creator_layer/video_agent
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DESCRIPT_API_KEY=${DESCRIPT_API_KEY}
    ports:
      - "8003:8003"
    depends_on:
      - postgres
    networks:
      - aos_network
    volumes:
      - ./services/creator_layer/video_agent:/app

  social_media_manager:
    build: ./services/creator_layer/social_media_manager
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - LINKEDIN_CLIENT_ID=${LINKEDIN_CLIENT_ID}
      - LINKEDIN_CLIENT_SECRET=${LINKEDIN_CLIENT_SECRET}
    ports:
      - "8004:8004"
    depends_on:
      - postgres
    networks:
      - aos_network
    volumes:
      - ./services/creator_layer/social_media_manager:/app

  # Enterprise Layer Services
  compliance_engine:
    build: ./services/enterprise_layer/compliance_engine
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-aos_user}:${POSTGRES_PASSWORD:-aos_password}@postgres:5432/${POSTGRES_DB:-aos_db}
      - COMPLIANCE_FRAMEWORK=${COMPLIANCE_FRAMEWORK:-enterprise}
    ports:
      - "8005:8005"
    depends_on:
      - postgres
      - orchestration_agent
    networks:
      - aos_network
    volumes:
      - ./services/enterprise_layer/compliance_engine:/app

  audit_service:
    build: ./services/enterprise_layer/audit_service
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-aos_user}:${POSTGRES_PASSWORD:-aos_password}@postgres:5432/${POSTGRES_DB:-aos_db}
    ports:
      - "8006:8006"
    depends_on:
      - postgres
    networks:
      - aos_network
    volumes:
      - ./services/enterprise_layer/audit_service:/app

  airlock_system:
    build: ./services/airlock_system
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-aos_user}:${POSTGRES_PASSWORD:-aos_password}@postgres:5432/${POSTGRES_DB:-aos_db}
      - AUDIT_SERVICE_URL=http://audit_service:8006
      - DATA_ARCHITECTURE_URL=http://data_architecture:8020
    ports:
      - "8007:8007"
    depends_on:
      - postgres
      - audit_service
      - data_architecture
    networks:
      - aos_network
    volumes:
      - ./services/airlock_system:/app

  # Data Architecture Service
  data_architecture:
    build: ./services/data_architecture
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - PINECONE_INDEX_NAME=${PINECONE_INDEX_NAME}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    ports:
      - "8020:8020"
    depends_on:
      - postgres
      - kafka
    networks:
      - aos_network
    volumes:
      - ./services/data_architecture:/app

  # Training Validation Service
  training_validation_service:
    build: ./services/training-validation/training_validation_service
    container_name: aos_training_validation_service
    restart: unless-stopped
    ports:
      - "${TRAINING_VALIDATION_PORT:-8033}:8033"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-aos_user}:${POSTGRES_PASSWORD:-aos_password}@postgres:5432/${POSTGRES_DB:-aos_db}
      - WEB_INTELLIGENCE_URL=http://web_intelligence_service:8032
      - DOCUMENT_ENGINE_URL=http://document_engine:8031
      - AIRLOCK_URL=http://airlock_system:8007
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT:-us-east1-gcp}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - postgres
      - web_intelligence_service
      - document_engine
      - airlock_system
    networks:
      - aos_network
    volumes:
      - ./services/training-validation/training_validation_service:/app
      - ./logs:/app/logs

  # Document Processing Services
  unstructured_api:
    image: unstructuredio/unstructured:0.14.8
    container_name: aos_unstructured_api
    restart: unless-stopped
    ports:
      - "${UNSTRUCTURED_PORT:-8030}:8000"
    environment:
      - UNSTRUCTURED_API_KEY=${UNSTRUCTURED_API_KEY}
    networks:
      - aos_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  document_engine:
    build: ./services/document_processing/document_engine
    container_name: aos_document_engine
    restart: unless-stopped
    ports:
      - "${DOCUMENT_ENGINE_PORT:-8031}:8031"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-aos_user}:${POSTGRES_PASSWORD:-aos_password}@postgres:5432/${POSTGRES_DB:-aos_db}
      - UNSTRUCTURED_API_URL=http://unstructured_api:8000
      - UNSTRUCTURED_API_KEY=${UNSTRUCTURED_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - postgres
    networks:
      - aos_network
    volumes:
      - ./services/document_processing/document_engine:/app
      - ./logs:/app/logs

  web_intelligence_service:
    build: ./services/intelligence/web_intelligence_service
    container_name: aos_web_intelligence_service
    restart: unless-stopped
    ports:
      - "${WEB_INTEL_PORT:-8032}:8032"
    environment:
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - postgres
    networks:
      - aos_network
    volumes:
      - ./services/intelligence/web_intelligence_service:/app
      - ./logs:/app/logs

  # Message Queue - Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - aos_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - aos_network

  # Frontend UI
  ui:
    build: ./ui
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
    networks:
      - aos_network
    volumes:
      - ./ui:/app
      - /app/node_modules

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - aos_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - aos_network

networks:
  aos_network:
    driver: bridge

volumes:
  postgres_data:
  sandbox_storage:
  production_storage:
  grafana_data:
